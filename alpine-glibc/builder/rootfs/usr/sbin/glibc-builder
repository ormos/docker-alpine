#!/usr/bin/env sh
# shellcheck disable=SC2039

readonly VERSION='1.0.1'
readonly AUTHOR='Ralf Hofmann'
readonly CONTACT='<r.hofmann@sap.com>'

readonly GLIBC_DEF_VERSION='2.28'
readonly GLIBC_DEF_ARCH='x86_64'
readonly GLIBC_DEF_PREFIX='/usr/glibc-compat'

readonly GLIBC_BASE_URL='http://ftp.gnu.org/gnu/glibc'
readonly GLIBC_ARCHIVE_FOLDER="${DATA_FOLDER}"

###########################################################################
# main functionality of the script
###########################################################################
main()
{
  # initialize all global variables
  _initialize

  local RELEASE="${GLIBC_VERSION:-${GLIBC_DEF_VERSION}}"
  local ARCH="${GLIBC_ARCH:-${GLIBC_DEF_ARCH}}"
  local PREFIX="${GLIBC_PREFIX:-${GLIBC_DEF_PREFIX}}"

  local GLIBC_ARCHIVE_FILE="alpine-glibc-${RELEASE}-${ARCH}.tgz"
  
  # Process command line arguments
  # Options followed by one colon indicate having required argument
  OPTSTR=$(getopt -o hvSr:a:u:p:N \
                  --long help,version,stream,release:,arch:,url:,prefix,nopurge \
                  -n "${SCRIPT_NAME}" -- "$@") || _usage
  eval set -- "$OPTSTR"
  while true ; do
    case "$1" in
      '-h'|'--help')    _help            ; exit    ;;
      '-v'|'--version') _version         ; exit    ;;
	    '-S'|'--stream')  STREAM=1         ; shift   ;;
      '-r'|'--release') RELEASE="$2"     ; shift 2 ;;
      '-a'|'--arch')    ARCH="${2}"      ; shift 2 ;;
      '-u'|'--url')     URL="${2}"       ; shift 2 ;;
      '-p'|'--prefix')  PREFIX="${2%/}"  ; shift 2 ;;
      '-N'|'--nopurge') NOPURGE=1        ; shift   ;;
      '--')             shift            ; break   ;;
      *)                _usage                     ;;
    esac
  done

  if [ $# -gt 1 ]; then
    _usage; _error_exit "too many command line parameter"
  fi

  if [ "$(id -u)" -ne 0 ]; then
    _error_exit "root priviliges are required"
  fi

  local URL="${URL:-${GLIBC_BASE_URL}/glibc-${RELEASE}.tar.gz}"

  GLIBC_ARCHIVE_FILE="alpine-glibc-${RELEASE}-${ARCH}.tgz"
  local GLIBC_ARCHIVE_PATH="${GLIBC_ARCHIVE_FOLDER}/${GLIBC_ARCHIVE_FILE}"
  if [ $# -eq 1 ]; then
    GLIBC_ARCHIVE_PATH="$1"
    shift
  fi

  [ -d "$(dirname -- "${GLIBC_ARCHIVE_PATH}")" ] || \
    (GLIBC_ARCHIVE_DIR="$(dirname -- "${GLIBC_ARCHIVE_PATH}")" ; \
     mkdir -p "${GLIBC_ARCHIVE_DIR}" ; \
     GLIBC_ARCHIVE_PARENT_DIR="$(dirname -- "${GLIBC_ARCHIVE_DIR}")" ; \
     chown "$(stat -c %u "${GLIBC_ARCHIVE_PARENT_DIR}")":"$(stat -c %g "${GLIBC_ARCHIVE_PARENT_DIR}")" "${GLIBC_ARCHIVE_FOLDER}")
 
  local GLIBC_ARCHIVE_META="${GLIBC_ARCHIVE_PATH}"
  [ -f "${GLIBC_ARCHIVE_META}" ] || GLIBC_ARCHIVE_META="$(dirname -- "${GLIBC_ARCHIVE_META}")"
  # shellcheck disable=SC2155
  local GLIBC_ARCHIVE_UID="$(stat -c %u "${GLIBC_ARCHIVE_META}")"
  # shellcheck disable=SC2155
  local GLIBC_ARCHIVE_GID="$(stat -c %g "${GLIBC_ARCHIVE_META}")"

  # shellcheck disable=SC2155
  local TMP_ARCHIVE_PATH="$(_make_temp).tgz"
  if provide_glibc_archive "${TMP_ARCHIVE_PATH}" "${RELEASE}" "${ARCH}" "${PREFIX}" "${URL}"; then
    if [ ! "${NOPURGE:-}" ]; then 
      cleanup_glibc_archive "${GLIBC_ARCHIVE_PATH}" "${TMP_ARCHIVE_PATH}" || _error_exit "failed to purge glibc archive"
      rm "${TMP_ARCHIVE_PATH}"
    else
      mv "${TMP_ARCHIVE_PATH}" "${GLIBC_ARCHIVE_PATH}"
    fi
    chown "${GLIBC_ARCHIVE_UID}":"${GLIBC_ARCHIVE_GID}" "${GLIBC_ARCHIVE_PATH}"
  else
    _error_exit "failed to create binary distribution archive"
  fi

  [ "${STREAM:-}" ] && [ -s "${GLIBC_ARCHIVE_PATH}" ] && cat "${GLIBC_ARCHIVE_PATH}"
}

provide_glibc_archive()
{
  local ARCHIVE="$1" ; shift  
  local RELEASE="$1" ; shift 
  local ARCH="$1"    ; shift
  local PREFIX="$1"  ; shift
  local URL="$1"     ; shift

  # shellcheck disable=SC2155
  local GLIBC_FOLDER="$(_make_temp -d)"

  _message -i "Downloading GLIBC source files archive '${URL}'... " >&2
  (curl -jkSL -# "${URL}" | tar zxf - -C "${GLIBC_FOLDER}" 2>/dev/null) || _error_exit "failed to download GLIBC source files" 
  mkdir -p "${GLIBC_FOLDER}/glibc-build" && cd "${GLIBC_FOLDER}/glibc-build"  

# shellcheck disable=SC2119
_trim <<- -CFG- >configparams
  slibdir=${PREFIX}/lib
  rtlddir=${PREFIX}/lib
  sbindir=${PREFIX}/bin
  rootsbindir=${PREFIX}/bin
  build-programs=yes
-CFG-

  { 
    "../glibc-${RELEASE}/configure" \
        --prefix="${PREFIX}" \
        --libdir="${PREFIX}/lib" \
        --libexecdir="${PREFIX}/lib" \
        --host="${ARCH}-pc-linux-gnu" \
        --enable-multi-arch
    # patch the old rpc types
    # sed -i -e 's/defined __APPLE_CC__ || defined __FreeBSD__/defined __APPLE_CC__ || defined __FreeBSD__ || defined(_GNU_SOURCE)/g' "../glibc-${RELEASE}/sunrpc/rpc/types.h"
    make && make install

    # strip the executable files and shared libraries
    (find "${PREFIX}" -print0 -type f | xargs -0 file | grep "executable"    | grep ELF | cut -f1 -d: | \
      xargs strip --strip-unneeded) 2>/dev/null
    (find "${PREFIX}" -print0 -type f | xargs -0 file | grep "shared object" | grep ELF | cut -f1 -d: | \
      xargs strip --strip-debug) 2>/dev/null

    # create standard C.UTF-8 locale
    (mkdir -p "${PREFIX}/lib/locale" && "${PREFIX}/bin/localedef" --force --inputfile POSIX --charmap UTF-8 C.UTF-8) || :

    # save to archive
    tar --hard-dereference --create --gzip --file="${ARCHIVE}" "${PREFIX}"

    # remove installed glibc 
    rm -rf "${GLIBC_FOLDER}" "${PREFIX}" 
  } >&2

  return 0
}

cleanup_glibc_archive()
{
  local ARCHIVE="$1"   ; shift  
  local GLIBC_ARC="$1" ; shift  

  # shellcheck disable=SC2155
  local GLIBC_FOLDER="$(_make_temp -d)"

  {
    tar zxf "${GLIBC_ARC}" -C "${GLIBC_FOLDER:?}"
    rm -rf "${GLIBC_FOLDER:?}${PREFIX}"/etc/rpc
    rm -rf "${GLIBC_FOLDER:?}${PREFIX}"/lib/gconv
    rm -rf "${GLIBC_FOLDER:?}${PREFIX}"/lib/getconf
    rm -rf "${GLIBC_FOLDER:?}${PREFIX}"/lib/audit
    rm -rf "${GLIBC_FOLDER:?}${PREFIX}"/lib/*.a
    rm -rf "${GLIBC_FOLDER:?}${PREFIX}"/lib/*.o
    rm -rf "${GLIBC_FOLDER:?}${PREFIX}"/include
    rm -rf "${GLIBC_FOLDER:?}${PREFIX}"/var
    rm -rf "${GLIBC_FOLDER:?}${PREFIX}"/share
    
    # link the loader to the default /lib64 folder
    mkdir -p "${GLIBC_FOLDER:?}/lib64"
    ln -s "${GLIBC_FOLDER:?}${PREFIX}/lib/ld-linux-x86-64.so.2" "${GLIBC_FOLDER:?}/lib64/ld-linux-x86-64.so.2"
    
    # create a ld.so.conf and link it to /etc
    mkdir -p "${GLIBC_FOLDER:?}${PREFIX}/etc" "${GLIBC_FOLDER:?}/etc"
# shellcheck disable=SC2119
_trim <<- -EOF- >"${GLIBC_FOLDER:?}${PREFIX}/etc/ld.so.conf"
  ${PREFIX}/lib
  /usr/lib
  /lib
-EOF-
    ln -s "${GLIBC_FOLDER:?}${PREFIX}/etc/ld.so.cache" "${GLIBC_FOLDER:?}/etc/ld.so.cache"

    mkdir -p "${GLIBC_FOLDER:?}/etc"  
# shellcheck disable=SC2119
_trim <<- -EOF- >"${GLIBC_FOLDER:?}/etc/nsswitch.conf"
  hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4
-EOF-

    # save to archive
    # shellcheck disable=SC2155
    local PATH_PATTERN="$(echo "${GLIBC_FOLDER}"|sed 's|/|\\/|g')"
    # shellcheck disable=SC2046
    tar --absolute-names --transform="s|^${PATH_PATTERN}||rsh" --create --gzip --file="${ARCHIVE}" \
      $(find "${GLIBC_FOLDER}"/* -maxdepth 0 -type d -o -type f -o -type l)
    
    # cleanup 
    rm -rf "${GLIBC_FOLDER}"
  } >&2

  return 0
}

###########################################################################
# customized functions
###########################################################################
_usage() {
cat <<- -EOF- >&2
  usage: ${SCRIPT_NAME} [-h|--help] [-v|--version]  [-S|--stream] 
            [-r|--release <release>] [-a|--arch <architecture>] 
            [-u|--url <download url>] [-p|--prefix <prefix>] 
            [-N|--nopurge] <glibc archive>
-EOF-
exit 1
}

_help() {
cat <<- -EOF-

  ${SCRIPT_NAME} Version ${VERSION}
  by ${AUTHOR} ${CONTACT}

  Generate GLIBC binary distribution archive

  ${SCRIPT_NAME} [-h|--help] [-v|--version]  [-S|--stream] 
    [-r|--release <release>] [-a|--arch <architecture>] 
    [-u|--url <download url>] [-p|--prefix <prefix>] 
    [-N|--nopurge] <glibc archive>
    
    <glibc archive>  archive as full path [${GLIBC_ARCHIVE_FOLDER}/${GLIBC_ARCHIVE_FILE}]

  Options:

    -h, --help                Display this help message and exit.
    -v, --version             Display version and exit.
    -S, --stream              Stream archive to stdout.
    -r, --release <release>   The glibc release version (e.g. '${GLIBC_DEF_VERSION}').
    -a, --arch <architecture> Platform architecture (e.g. '${GLIBC_DEF_ARCH}')
    -u, --url <download url>  Download url of GLIBC source archive. 
    -p, --prefix <prefix>     Installation prefix  (e.g. '${GLIBC_DEF_PREFIX}').
    -N, --nopurge             Omit purging GLIBC binary distribution archive.

-EOF-
}

### begin -- ormos/utility : 1.1.0 / 27-FEB-2017
###########################################################################
# utility functions
###########################################################################

#
# Output version information
#
# shellcheck disable=SC2120
_version() {
  _message -s -f 'Version %s by %s %s\n' "${VERSION}" "${AUTHOR}" "${CONTACT}"
}

#
# Intialize global settings
#
# shellcheck disable=SC2120
_initialize()
{
  set -o nounset -o errexit ; [ -n "${BASH:-}" ] && set -eo pipefail ; [ -n "${_TRACE_:-}" ] && set -x

  # Set file creation mask so that all files are created with 600 permissions.
  # This will help protect temp files.
  umask 066

  # the full qualified path of the script
  # shellcheck disable=SC2034
  SCRIPT_PATH=$(dirname -- "$(_real_path "$0")")
  SCRIPT_NAME=$(basename -- "$0")
  TMP_FOLDER="${TMPDIR:-/tmp/$(id -u)}/${SCRIPT_NAME}-$$"

  # make sure temp folder exists
  [ -d "${TMP_FOLDER}" ] || mkdir -p "${TMP_FOLDER}"

  # verbose level
  _VERBOSE_=${_VERBOSE_:-0}

  # Trap TERM, HUP, and INT signals and properly exit
  trap -- '__exit_handler' EXIT
  trap -- '__terminate_handler' TERM HUP
  trap -- '__abort_handler' INT
}

#
# Output formatted error or text messages
#
# Options:
#   -s Script name used prefix.
#   -e Output error message
#   -w Output warning message
#   -i Output information message
#   -f Printf like format string
#
# Arguments:
#   '-' read message from stdin
#   <*> string holding text message as parameter
#
# shellcheck disable=SC2120
_message()
{
  local IDNX CATG LEN FMT TXT_IDNX TXT_CATG TXT_PRFX TXT_MSG LEN_PRFX=0

  while [ $# -gt 0 ]; do
    case $1 in
      -s ) IDNX="${SCRIPT_NAME}"; shift ;;
      -e ) CATG='ERROR'         ; shift ;;
      -w ) CATG='WARNING'       ; shift ;;
      -i ) CATG='INFO'          ; shift ;;
      -f ) FMT=$2 ; shift       ; shift ;;
      -- ) break                ; shift ;;
      * )  break                          ;;
    esac
  done

  if [ -n "${IDNX:-}" ]; then
    TXT_IDNX="$(printf '%s - ' "$IDNX")"
    LEN_PRFX=$((${#IDNX} + 3))
    TXT_PRFX="$TXT_IDNX"
  fi
  if [ -n "${CATG:-}" ]; then
    TXT_CATG="$(printf '%s: ' "$CATG")"
    LEN_PRFX=$((${#CATG} + 2))
    TXT_PRFX="${TXT_PRFX:-}$TXT_CATG"
  fi

  # check if we should indent
  [ "${LEN:-0}" -lt $LEN_PRFX ] || LEN_PRFX=${LEN:-0}

  # format the output using the format string or default
  # shellcheck disable=SC2059
  if [ -n "${FMT:-}" ]; then
    if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
      TXT_MSG="$(printf "${FMT}" "$(cat -)")"
    else
      TXT_MSG="$(printf "${FMT}" "$@")"
    fi
  else
    if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
      TXT_MSG="$(cat -)"
    else
      TXT_MSG="$(printf "$@")"
    fi
  fi

  printf '%*s%s\n' "$LEN_PRFX" "${TXT_PRFX:-}" "$TXT_MSG"
}

#
# Returns string indented by 4 spaces
#
# Arguments:
#   '-' read string from stdin
#   <*> string as parameter
#
# shellcheck disable=SC2120
_indent()
{
  local INDENT='    '

  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    sed -e "s/^/${INDENT}/g"
  else
    # shellcheck disable=SC2001
    echo "$@" | sed -e "s/^/${INDENT}/g"
  fi
}

#
# Returns lowercase string
#
# Arguments:
#   '-' read string from stdin
#   <*> string as parameter
#
# shellcheck disable=SC2120
_tolower()
{
  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    tr '[:upper:]' '[:lower:]'
  else
    echo "$@" | tr '[:upper:]' '[:lower:]'
  fi
}

#
# Returns uppercase string
#
# Arguments:
#   '-' read string from stdin
#   <*> string as parameter
#
# shellcheck disable=SC2120
_toupper()
{
  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    tr '[:lower:]' '[:upper:]'
  else
    echo "$@" | tr '[:lower:]' '[:upper:]'
  fi
}

#
# Trims any leading and trailing tabs or spaces
#
# Arguments:
#   '-' read string from stdin
#   <*> string as parameter
#
# shellcheck disable=SC2120
_trim()
{
  # local VAR="$@"
  # VAR="${VAR#"${VAR%%[![:space:]]*}"}" # remove leading whitespace characters
  # VAR="${VAR%"${VAR##*[![:space:]]}"}" # remove trailing whitespace characters
  # echo "${VAR}"

  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//'
  else
    echo "$@" | sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//'
  fi
}

#
# Function for outputting a time stamp
#
# shellcheck disable=SC2120
_time_stamp()
{
  date -u +%Y-%m-%dT%H:%M:%S%z
}

#
# Function for exit due to fatal program error
#
# Arguments:
#   '-' read message from stdin
#   <1> string holding text message as parameter
#   <2> exit code
#
# shellcheck disable=SC2120
_error_exit()
{
  local MESSAGE

  if [ "${1:-}" = '-' ]; then
    MESSAGE="$(cat -)"
  else
    MESSAGE="${1:-}"
  fi

  _message -s -e "${MESSAGE:-Unknown Error}"  >&2

  exit "${2:-1}"
}

#
# Function to perform action on script exit
#
__exit_handler()
{
  __do_cleanup
}

#
# Function to perform exit if termination signal is trapped
#
__terminate_handler()
{
  _message -s -w "Terminated" >&2

  exit
}

#
# Function to perform exit if interrupt signal is trapped
#
 __abort_handler()
{
  _message -s -w "Aborted by user" >&2

  exit
}

#
# Function to remove temporary files and other housekeeping
#
__do_cleanup()
{
  # remove the temp folder
  [ "${_VERBOSE_:-0}" -lt 3 ] && [ -d "${TMP_FOLDER}" ] && \
    (rm -rf "${TMP_FOLDER}" >/dev/null 2>&1 || :)

  return 0
}

# Function to create a temporary files or folder
#
# Options:
#   -d Create directory instead og file
#
# Arguments:
#   <1> Name mask pattern to use
#
# shellcheck disable=SC2120
_make_temp()
{
  local TMPOPTS='-p'

  if [ "${1:-}" = '-d' ]; then
    TMPOPTS="-d ${TMPOPTS}" ; shift;
  fi
  local TMPMASK="${1:-${SCRIPT_NAME}-XXXXXX}"

  # shellcheck disable=SC2086
  mktemp ${TMPOPTS} "${TMP_FOLDER}" "${TMPMASK}"
}

# Function to retrieve a full filesystem path
#
# Arguments:
#   <1> Absolute or relative filesystem path
#
# shellcheck disable=SC2120
_real_path()
{
  local PTH="${1:-.}"
 
  if [ -d "$(dirname -- "${PTH}")" ]; then  
    # shellcheck disable=SC2155
    local _readlink="$(command -v greadlink || command -v readlink || :)"
    ([ "${_readlink}" ] && "${_readlink}" -f "${PTH}") || \
    ([ -d "${PTH}" ] && (cd "${PTH}"; pwd)) || \
    (cd "$(dirname -- "${PTH}")"; case "${PWD}" in */) echo "${PWD}$(basename -- "${PTH}")"  ;; 
                                                    *) echo "${PWD}/$(basename -- "${PTH}")" ;; 
                              esac )
  else
    case "${PTH}" in /*) echo "${PTH}" ;; *) echo "${PWD}/${PTH}" ;; esac | \
      (
        local PTS ; IFS=/
        # shellcheck disable=SC2013
        for P in $(cat); do
          case "${P}" in
            ''|'.') ;;
              '..') PTS="$(dirname -- "${PTS}")" ;;
                 *) case "${PTS}" in */) PTS="${PTS}${P}"  ;; 
                                      *) PTS="${PTS}/${P}" ;; 
                    esac ;;
          esac
        done
        echo "${PTS:-}"
      )
  fi
}

###########################################################################
# Execution starts here
###########################################################################
main "$@"

### end -- ormos/utility : 1.1.0 / 27-FEB-2017
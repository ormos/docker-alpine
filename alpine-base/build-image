#!/usr/bin/env bash

build() {
    declare build_files="${*:-versions/**/options}"

    [[ "${BUILDER_IMAGE}" ]] || {
        BUILDER_IMAGE='elvido/alpine-builder'
        docker build -t "${BUILDER_IMAGE}" builder
    }

    for file in ${build_files}; do
        (
	        source "${file}"
	        local version_dir
	        version_dir="$(dirname "${file}")"
	        : "${TAGS:?}" "${BUILD_OPTIONS:?}" "${RELEASE:?}"
	        docker run -e "TRACE=${TRACE}" --rm "${BUILDER_IMAGE}" "${BUILD_OPTIONS[@]}" \
	            > "$version_dir/rootfs.tgz"

	        for tag in "${TAGS[@]}"; do
	            docker build -t "${tag}" "${version_dir}"
	        done )
    done
}

commit() {
    declare rootfs_files="versions/**/rootfs.tgz"
    local current_branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    : "${current_branch:?}"

    for file in ${rootfs_files}; do
        local release version_dir
        release="$(basename "$(dirname "${file}")")"
        version_dir="$(dirname "${file}")"
        : "${release:?}" "${version_dir:?}"
        git checkout -B "rootfs/$release" "${current_branch}"
        git add -f -- "${file}"
        git commit -m "release image version ${release}"
    done
    git push -f origin 'refs/heads/rootfs/*'
    git checkout "${current_branch}"
}

push() {
    declare build_files="${*:-versions/**/options}"
    for file in ${build_files}; do
        (
	        source "${file}"
	        for tag in "${TAGS[@]}"; do
	            if docker history "${tag}" &> /dev/null; then
	                [[ "${PUSH_IMAGE}" ]] && docker push "${tag}"
	            fi
	        done
	        exit 0 )
    done
}

cleanup() {
    [[ "${BUILDER_IMAGE}" ]] || {
        BUILDER_IMAGE='elvido/alpine-builder'
        docker rmi "${BUILDER_IMAGE}"
    }
}

main() {
    set -eo pipefail; [[ "${TRACE}" ]] && set -x
    declare cmd="$1"
    case "${cmd}" in
        commit)	    shift; commit "$@";;
        push)	    shift; push "$@";;
        build)	    shift; build "$@";;
        cleanup)    shift; cleanup "$@";;
        *)		    build "$@";;
    esac
}

main "$@"

#!/usr/bin/env sh

readonly VERSION='1.0.1'
readonly AUTHOR='Ralf Hofmann'
readonly CONTACT='<r.hofmann@sap.com>'

readonly ALPINE_BASE_IMAGE='alpine:3.6'

readonly DEFAULT_BUILDER_IMAGE='elvido/alpine-builder'
readonly DEFAULT_RELEASES_FOLDER='./releases'

readonly BUILDER_FOLDER='builder'
readonly BUILDER_OPTIONS='options'
readonly ROOTFS_ARCHIVE='rootfs.tgz'

###########################################################################
# main functionality of the script
###########################################################################
main()
{
  # initialize all global variables
  _initialize

  RELEASES="${DEFAULT_RELEASES_FOLDER}"
  BUILDER_IMAGE="${DEFAULT_BUILDER_IMAGE}"
  
  # Process command line arguments
  # Options followed by one colon indicate having required argument
  OPTSTR=$(getopt -o hvr:i: \
                  --long help,version,releases:,image: \
                  -n "${SCRIPT_NAME}" -- "$@") || _usage
  eval set -- "$OPTSTR"
  while true ; do
    case "$1" in
      '-h'|'--help')     _help              ; exit    ;;
      '-v'|'--version')  _version           ; exit    ;;
      '-i'|'--image')    BUILDER_IMAGE="$2" ; shift 2 ;;
      '-r'|'--releases') RELEASES="$2"      ; shift 2 ;;
      '--')              shift              ; break   ;;
      *)                 _usage             ;;
    esac
  done

  if [ $# -lt 1 ]; then
    _usage; _error_exit "missing command line parameter"
  fi
  [ -d "${RELEASES}" ] || _error_exit "releases folder '${RELEASES}' can not be located"
  RELEASES="$(_real_path "${RELEASES}")"
  
  local CMD="$1"
  case "${CMD}" in
    commit)	 shift; commit  "$@";;
    push)	   shift; push    "$@";;
    build)	 shift; build   "$@";;
    cleanup) shift; cleanup "$@";;
    *)		    _usage            ;;
  esac
}

build() 
{
  docker build --no-cache --squash -t "${BUILDER_IMAGE}" "${BUILDER_FOLDER}"

  local OPTIONS_FILES="${*:-${RELEASES}/**/${BUILDER_OPTIONS}}"

  for OPTIONS_FILE in ${OPTIONS_FILES}
  do
    (
      # source build options
      . "${OPTIONS_FILE}"
      # shellcheck disable=SC2155
      local RELEASE_DIR="$(dirname -- "${OPTIONS_FILE}")"
      : "${TAGS:?}" "${BUILD_OPTIONS:?}" "${RELEASE:?}"
      # shellcheck disable=SC2086
      docker run -e "_TRACE_=${_TRACE_:-}" --rm "${BUILDER_IMAGE}" -S ${BUILD_OPTIONS} \
        > "${RELEASE_DIR}/${ROOTFS_ARCHIVE}"

      for TAG in ${TAGS} 
      do
        docker build --squash -t "${TAG}" "${RELEASE_DIR}"
      done 
    )
  done
}

commit() 
{
  # shellcheck disable=SC2155
  local CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
  : "${CURRENT_BRANCH:?}"

  local ROOTFS_FILES="${*:-${RELEASES}/**/${ROOTFS_ARCHIVE}}"
  for ROOTFS_FILE in ${ROOTFS_FILES} 
  do
    # shellcheck disable=SC2155
    local RELEASE="$(basename -- "$(dirname -- "${ROOTFS_FILE}")")"
    # shellcheck disable=SC2155
    local RELEASE_DIR="$(dirname -- "${ROOTFS_FILE}")"
    : "${RELEASE:?}" "${RELEASE_DIR:?}"
    git checkout -B "rootfs/${RELEASE}" "${CURRENT_BRANCH}"
    git add -f -- "${ROOTFS_FILE}"
    git commit -m "release image version ${RELEASE}"
  done
  git push -f origin 'refs/heads/rootfs/*'
  git checkout "${CURRENT_BRANCH}"
}

push() 
{
  local OPTIONS_FILES="${*:-${RELEASES}/**/${BUILDER_OPTIONS}}"

  for OPTIONS_FILE in ${OPTIONS_FILES}
  do
    (
      # source build options
      . "${OPTIONS_FILE}"
      for TAG in ${TAGS} 
      do
        # shellcheck disable=SC2039
        if docker history "${TAG}" &> /dev/null; then
          [ "${PUSH_IMAGE:-}" ] && docker push "${TAG}"
        fi
      done
      exit 0 
    )
  done
}

cleanup() 
{
  docker rmi "${BUILDER_IMAGE}" >/dev/null 2>&1  || :
  docker rmi "${ALPINE_BASE_IMAGE}" >/dev/null 2>&1 || :
  (docker images -f 'dangling=true' -q | xargs docker rmi) >/dev/null 2>&1 || :
}

###########################################################################
# customized functions
###########################################################################
_usage() {
cat <<- -EOF- >&2
  usage: ${SCRIPT_NAME} [-h|--help] [-v|--version] [-i|--image <image>] [-r|--releases <releases>]  
            build|push|commit|cleanup
-EOF-
exit 1
}

_help() {
cat <<- -EOF-

  ${SCRIPT_NAME} Version ${VERSION}
  by ${AUTHOR} ${CONTACT}

  Generate alpine base images

  ${SCRIPT_NAME} [-h|--help] [-v|--version] [-i|--image <image>] [-r|--releases <releases>] 
    build|push|commit|cleanup

  Commands:
    build     Build the root filesystem image.
    push      Push the docker images to repository.
    commit    Commit local changes to git repository.
    cleanup   Clean up the intermediated files.

  Options:

    -h, --help                Display this help message and exit.
    -v, --version             Display version and exit.
    -i, --image <image>       The docker image to use for building ['${DEFAULT_BUILDER_IMAGE}'].
    -r, --releases <releases> Folder storing alpine docker releases ['${DEFAULT_RELEASES_FOLDER}'].

-EOF-
}

### begin -- elvido/utility : 1.1.0 / 27-FEB-2017
###########################################################################
# utility functions
###########################################################################

#
# Output version information
#
# shellcheck disable=SC2120
_version() {
  _message -s -f "Version %s by %s %s\n" "${VERSION}" "${AUTHOR}" "${CONTACT}"
}

#
# Intialize global settings
#
# shellcheck disable=SC2120
_initialize()
{
  set -o nounset -o errexit ; [ -n "${BASH:-}" ] && set -eo pipefail ; [ -n "${_TRACE_:-}" ] && set -x

  # Set file creation mask so that all files are created with 600 permissions.
  # This will help protect temp files.
  umask 066

  # the full qualified path of the script
  # shellcheck disable=SC2034
  SCRIPT_PATH=$(dirname -- "$(_real_path "$0")")
  SCRIPT_NAME=$(basename -- "$0")
  TMP_FOLDER="${TMPDIR:-/tmp/$(id -u)}/${SCRIPT_NAME}-$$"

  # make sure temp folder exists
  [ -d "${TMP_FOLDER}" ] || mkdir -p "${TMP_FOLDER}"

  # verbose level
  _VERBOSE_=${_VERBOSE_:-0}

  # Trap TERM, HUP, and INT signals and properly exit
  trap -- '__exit_handler' EXIT
  trap -- '__terminate_handler' TERM HUP
  trap -- '__abort_handler' INT
}

#
# Output formatted error or text messages
#
# Options:
#   -s Script name used prefix.
#   -e Output error message
#   -w Output warning message
#   -i Output information message
#   -f Printf like format string
#
# Arguments:
#   '-' read message from stdin
#   <*> string holding text message as parameter
#
# shellcheck disable=SC2120
_message()
{
  local IDNX CATG LEN FMT TXT_IDNX TXT_CATG TXT_PRFX TXT_MSG LEN_PRFX=0

  while [ $# -gt 0 ]; do
    case $1 in
      -s ) IDNX="${SCRIPT_NAME}"; shift ;;
      -e ) CATG='ERROR'         ; shift ;;
      -w ) CATG='WARNING'       ; shift ;;
      -i ) CATG='INFO'          ; shift ;;
      -f ) FMT=$2 ; shift       ; shift ;;
      -- ) break                ; shift ;;
      * )  break                          ;;
    esac
  done

  if [ -n "${IDNX:-}" ]; then
    TXT_IDNX="$(printf '%s - ' "$IDNX")"
    LEN_PRFX=$((${#IDNX} + 3))
    TXT_PRFX="$TXT_IDNX"
  fi
  if [ -n "${CATG:-}" ]; then
    TXT_CATG="$(printf '%s: ' "$CATG")"
    LEN_PRFX=$((${#CATG} + 2))
    TXT_PRFX="${TXT_PRFX:-}$TXT_CATG"
  fi

  # check if we should indent
  [ "${LEN:-0}" -lt $LEN_PRFX ] || LEN_PRFX=${LEN:-0}

  # format the output using the format string or default
  # shellcheck disable=SC2059
  if [ -n "${FMT:-}" ]; then
    if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
      TXT_MSG="$(printf "${FMT}" "$(cat -)")"
    else
      TXT_MSG="$(printf "${FMT}" "$@")"
    fi
  else
    if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
      TXT_MSG="$(cat -)"
    else
      TXT_MSG="$(printf "$@")"
    fi
  fi

  printf '%*s%s\n' "$LEN_PRFX" "${TXT_PRFX:-}" "$TXT_MSG"
}

#
# Returns string indented by 4 spaces
#
# Arguments:
#   '-' read string from stdin
#   <*> string as parameter
#
# shellcheck disable=SC2120
_indent()
{
  local INDENT='    '

  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    sed -e "s/^/${INDENT}/g"
  else
    # shellcheck disable=SC2001
    echo "$@" | sed -e "s/^/${INDENT}/g"
  fi
}

#
# Returns lowercase string
#
# Arguments:
#   '-' read string from stdin
#   <*> string as parameter
#
# shellcheck disable=SC2120
_tolower()
{
  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    tr '[:upper:]' '[:lower:]'
  else
    echo "$@" | tr '[:upper:]' '[:lower:]'
  fi
}

#
# Returns uppercase string
#
# Arguments:
#   '-' read string from stdin
#   <*> string as parameter
#
# shellcheck disable=SC2120
_toupper()
{
  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    tr '[:lower:]' '[:upper:]'
  else
    echo "$@" | tr '[:lower:]' '[:upper:]'
  fi
}

#
# Trims any leading and trailing tabs or spaces
#
# Arguments:
#   '-' read string from stdin
#   <*> string as parameter
#
# shellcheck disable=SC2120
_trim()
{
  # local VAR="$@"
  # VAR="${VAR#"${VAR%%[![:space:]]*}"}" # remove leading whitespace characters
  # VAR="${VAR%"${VAR##*[![:space:]]}"}" # remove trailing whitespace characters
  # echo "${VAR}"

  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//'
  else
    echo "$@" | sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//'
  fi
}

#
# Function for outputting a time stamp
#
# shellcheck disable=SC2120
_time_stamp()
{
  date -u +%Y-%m-%dT%H:%M:%S%z
}

#
# Function for exit due to fatal program error
#
# Arguments:
#   '-' read message from stdin
#   <1> string holding text message as parameter
#   <2> exit code
#
# shellcheck disable=SC2120
_error_exit()
{
  local MESSAGE

  if [ "${1:-}" = '-' ]; then
    MESSAGE="$(cat -)"
  else
    MESSAGE="${1:-}"
  fi

  _message -s -e "${MESSAGE:-Unknown Error}"  >&2

  exit "${2:-1}"
}

#
# Function to perform action on script exit
#
__exit_handler()
{
  __do_cleanup
}

#
# Function to perform exit if termination signal is trapped
#
__terminate_handler()
{
  _message -s -w "Terminated" >&2

  exit
}

#
# Function to perform exit if interrupt signal is trapped
#
 __abort_handler()
{
  _message -s -w "Aborted by user" >&2

  exit
}

#
# Function to remove temporary files and other housekeeping
#
__do_cleanup()
{
  # remove the temp folder
  [ "${_VERBOSE_:-0}" -lt 3 ] && [ -d "${TMP_FOLDER}" ] && \
    (rm -rf "${TMP_FOLDER}" >/dev/null 2>&1 || :)

  return 0
}

# Function to create a temporary files or folder
#
# Options:
#   -d Create directory instead og file
#
# Arguments:
#   <1> Name mask pattern to use
#
# shellcheck disable=SC2120
_make_temp()
{
  local TMPOPTS='-p'

  if [ "${1:-}" = '-d' ]; then
    TMPOPTS="-d ${TMPOPTS}" ; shift;
  fi
  local TMPMASK="${1:-${SCRIPT_NAME}-XXXXXX}"

  # shellcheck disable=SC2086
  mktemp ${TMPOPTS} "${TMP_FOLDER}" "${TMPMASK}"
}

# Function to retrieve a full filesystem path
#
# Arguments:
#   <1> Absolute or relative filesystem path
#
# shellcheck disable=SC2120
_real_path()
{
  local PTH="${1:-.}"
 
  if [ -d "$(dirname -- "${PTH}")" ]; then  
    # shellcheck disable=SC2155
    local _readlink="$(command -v greadlink || command -v readlink || :)"
    ([ "${_readlink}" ] && "${_readlink}" -f "${PTH}") || \
    ([ -d "${PTH}" ] && (cd "${PTH}"; pwd)) || \
    (cd "$(dirname -- "${PTH}")"; case "${PWD}" in */) echo "${PWD}$(basename -- "${PTH}")"  ;; 
                                                    *) echo "${PWD}/$(basename -- "${PTH}")" ;; 
                              esac )
  else
    case "${PTH}" in /*) echo "${PTH}" ;; *) echo "${PWD}/${PTH}" ;; esac | \
      (
        local PTS ; IFS=/
        # shellcheck disable=SC2013
        for P in $(cat); do
          case "${P}" in
            ''|'.') ;;
              '..') PTS="$(dirname -- "${PTS}")" ;;
                 *) case "${PTS}" in */) PTS="${PTS}${P}"  ;; 
                                      *) PTS="${PTS}/${P}" ;; 
                    esac ;;
          esac
        done
        echo "${PTS:-}"
      )
  fi
}

###########################################################################
# Execution starts here
###########################################################################
main "$@"

### end -- elvido/utility : 1.1.0 / 27-FEB-2017
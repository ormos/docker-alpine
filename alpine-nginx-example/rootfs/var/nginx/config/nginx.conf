worker_processes  1;
#daemon            off;

env DEBUG_EXTERNAL_URL;
env DEBUG_HOST_ADDR;

load_module modules/ndk_http_module.so;
load_module modules/ngx_http_lua_module.so;
load_module modules/ngx_http_echo_module.so;
load_module modules/ngx_http_set_misc_module.so;
load_module modules/ngx_http_headers_more_filter_module.so;

error_log /dev/stderr notice;

events {
    worker_connections  1024;
}

env DEPLOYMENT_FOLDER;

http {
    include       		mime.types;
    default_type  		application/octet-stream;
    access_log    		/dev/stdout;
    keepalive_timeout 	65;
    sendfile        	on;
    gzip 				on;

    # set search paths for pure Lua external libraries (';;' is the default path):
    lua_package_path '/var/nginx/lua/?.lua;;';
    # set search paths for Lua external libraries written in C (can also urise ';;'):
    lua_package_cpath '/var/nginx/lua/?.so;;';

    server {
        listen       80;
        server_name  localhost;

        location /lua_content {
            # MIME type determined by default_type:
            default_type 'text/plain';

            content_by_lua_block {
                ngx.say('Hello,world!')
            }
        }

        location /nginx_var {
            # MIME type determined by default_type:
            default_type 'text/plain';

            # try access /nginx_var?a=hello,world
            content_by_lua_block {
 				local f = assert(io.open(ngx.var.arg_a, "r"))
    			local t = f:read("*all")
    			f:close()
            	ngx.print(t)
            }
        }

      location = /request_body {
            default_type 'text/plain';

            content_by_lua_block {
                local cjson = require "cjson"
                local json = cjson.encode({
                    foo = "bar",
                    some_object = {},
                    some_array = cjson.empty_array
                })

                ngx.print(json)
                return
            }
        }

        location / {
            expires 1h;
            add_header Cache-Control "public";
            root  /var/nginx/html;
            try_files $uri $uri.json =403;
        }

        error_page 403 404 405 @40x;
        location @40x {
            try_files /etc/nginx/data/yaas.json =405;
        }
        error_page 500 502 503 504 =500 @50x;
        location @50x {
            try_files 50x.json =500;
        }
    }
}